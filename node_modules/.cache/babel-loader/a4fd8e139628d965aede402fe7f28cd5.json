{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA-8wsVn7giqh-Vo6MlMYTIjt1LQIoVsSc\",\n  authDomain: \"crwn-clothing-db-b360d.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-b360d\",\n  storageBucket: \"crwn-clothing-db-b360d.appspot.com\",\n  messagingSenderId: \"894166010737\",\n  appId: \"1:894166010737:web:40acb738c2184e614ac4d0\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user ' + error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createAuthUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/matasdamb/Documents/reacting/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA-8wsVn7giqh-Vo6MlMYTIjt1LQIoVsSc\",\n  authDomain: \"crwn-clothing-db-b360d.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-b360d\",\n  storageBucket: \"crwn-clothing-db-b360d.appspot.com\",\n  messagingSenderId: \"894166010737\",\n  appId: \"1:894166010737:web:40acb738c2184e614ac4d0\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    if(!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const userSnapshot = await getDoc(userDocRef); \n\n\n    if(!userSnapshot.exists()){\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email, \n                createdAt\n            })\n        }catch (error){\n            console.log('error creating the user ' + error.message);\n        }\n    }\n\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password) return;\n    return await createAuthUserWithEmailAndPassword(auth, email, password);\n} "],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,EAAuDC,8BAAvD,QAA6F,eAA7F;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CACA;AACA;AAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,wCAFS;EAGrBC,SAAS,EAAE,wBAHU;EAIrBC,aAAa,EAAE,oCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AAEAc,QAAQ,CAACC,mBAAT,CAA6B;EACzBC,MAAM,EAAE;AADiB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAApB;AACP,OAAO,MAAMoB,qBAAqB,GAAG,MAAMnB,eAAe,CAACkB,IAAD,EAAOH,QAAP,CAAnD;AAEP,OAAO,MAAMK,EAAE,GAAGjB,YAAY,EAAvB;AAEP,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;EAC1D,IAAG,CAACA,QAAJ,EAAc;EAEd,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;EACA,MAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACkB,UAAD,CAAjC;;EAGA,IAAG,CAACE,YAAY,CAACC,MAAb,EAAJ,EAA0B;IACtB,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBN,QAA/B;IACA,MAAMO,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAG;MACC,MAAMxB,MAAM,CAACiB,UAAD,EAAa;QACrBI,WADqB;QAErBC,KAFqB;QAGrBC;MAHqB,CAAb,CAAZ;IAKH,CAND,CAMC,OAAOE,KAAP,EAAa;MACVC,OAAO,CAACC,GAAR,CAAY,6BAA6BF,KAAK,CAACG,OAA/C;IACH;EACJ;;EAED,OAAOX,UAAP;AACH,CAvBM;AAyBP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EACzE,IAAG,CAACR,KAAD,IAAU,CAACQ,QAAd,EAAwB;EACxB,OAAO,MAAMD,kCAAkC,CAACjB,IAAD,EAAOU,KAAP,EAAcQ,QAAd,CAA/C;AACH,CAHM"},"metadata":{},"sourceType":"module"}