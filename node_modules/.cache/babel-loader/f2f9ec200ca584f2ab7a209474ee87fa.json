{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA-8wsVn7giqh-Vo6MlMYTIjt1LQIoVsSc\",\n  authDomain: \"crwn-clothing-db-b360d.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-b360d\",\n  storageBucket: \"crwn-clothing-db-b360d.appspot.com\",\n  messagingSenderId: \"894166010737\",\n  appId: \"1:894166010737:web:40acb738c2184e614ac4d0\"\n}; // Initialize Firebase\n//const firebaseApp = \n\ninitializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user ' + error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const SignInAuthWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n_c = SignInAuthWithEmailAndPassword;\nexport const SignOutUser = async () => await signOut(auth);\n_c2 = SignOutUser;\nexport const onAuthStateChangedListener = callback => {\n  onAuthStateChanged(auth, callback);\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SignInAuthWithEmailAndPassword\");\n$RefreshReg$(_c2, \"SignOutUser\");","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","SignInAuthWithEmailAndPassword","SignOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/matasdamb/Documents/reacting/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { \n    getAuth, \n    signInWithPopup, \n    GoogleAuthProvider, \n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged\n} from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA-8wsVn7giqh-Vo6MlMYTIjt1LQIoVsSc\",\n  authDomain: \"crwn-clothing-db-b360d.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-b360d\",\n  storageBucket: \"crwn-clothing-db-b360d.appspot.com\",\n  messagingSenderId: \"894166010737\",\n  appId: \"1:894166010737:web:40acb738c2184e614ac4d0\"\n};\n\n// Initialize Firebase\n//const firebaseApp = \ninitializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n    if(!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const userSnapshot = await getDoc(userDocRef); \n\n\n    if(!userSnapshot.exists()){\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email, \n                createdAt,\n                ...additionalInformation,\n            })\n        }catch (error){\n            console.log('error creating the user ' + error.message);\n        }\n    }\n\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password) return;\n    return await createUserWithEmailAndPassword(auth, email, password);\n} \n\nexport const SignInAuthWithEmailAndPassword = async (email, password) => {\n    if(!email || !password) return;\n    return await signInWithEmailAndPassword(auth, email, password);\n} \n\nexport const SignOutUser = async () => await signOut(auth);\n\nexport const onAuthStateChangedListener = (callback) => {\n    onAuthStateChanged(auth, callback);\n}"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACIC,OADJ,EAEIC,eAFJ,EAGIC,kBAHJ,EAIIC,8BAJJ,EAKIC,0BALJ,EAMIC,OANJ,EAOIC,kBAPJ,QAQO,eARP;AASA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CACA;AACA;AAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,wCAFS;EAGrBC,SAAS,EAAE,wBAHU;EAIrBC,aAAa,EAAE,oCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;AACA;;AACAlB,aAAa,CAACY,cAAD,CAAb;AAEA,MAAMO,QAAQ,GAAG,IAAIhB,kBAAJ,EAAjB;AAEAgB,QAAQ,CAACC,mBAAT,CAA6B;EACzBC,MAAM,EAAE;AADiB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGrB,OAAO,EAApB;AACP,OAAO,MAAMsB,qBAAqB,GAAG,MAAMrB,eAAe,CAACoB,IAAD,EAAOH,QAAP,CAAnD;AAEP,OAAO,MAAMK,EAAE,GAAGhB,YAAY,EAAvB;AAEP,OAAO,MAAMiB,0BAA0B,GAAG,gBAAOC,QAAP,EAAgD;EAAA,IAA/BC,qBAA+B,uEAAP,EAAO;EACtF,IAAG,CAACD,QAAJ,EAAc;EAEd,MAAME,UAAU,GAAGnB,GAAG,CAACe,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;EACA,MAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACkB,UAAD,CAAjC;;EAGA,IAAG,CAACE,YAAY,CAACC,MAAb,EAAJ,EAA0B;IACtB,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBP,QAA/B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAG;MACC,MAAMxB,MAAM,CAACiB,UAAD,EAAa;QACrBI,WADqB;QAErBC,KAFqB;QAGrBC,SAHqB;QAIrB,GAAGP;MAJkB,CAAb,CAAZ;IAMH,CAPD,CAOC,OAAOS,KAAP,EAAa;MACVC,OAAO,CAACC,GAAR,CAAY,6BAA6BF,KAAK,CAACG,OAA/C;IACH;EACJ;;EAED,OAAOX,UAAP;AACH,CAxBM;AA0BP,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EACzE,IAAG,CAACR,KAAD,IAAU,CAACQ,QAAd,EAAwB;EACxB,OAAO,MAAMrC,8BAA8B,CAACkB,IAAD,EAAOW,KAAP,EAAcQ,QAAd,CAA3C;AACH,CAHM;AAKP,OAAO,MAAMC,8BAA8B,GAAG,OAAOT,KAAP,EAAcQ,QAAd,KAA2B;EACrE,IAAG,CAACR,KAAD,IAAU,CAACQ,QAAd,EAAwB;EACxB,OAAO,MAAMpC,0BAA0B,CAACiB,IAAD,EAAOW,KAAP,EAAcQ,QAAd,CAAvC;AACH,CAHM;KAAMC,8B;AAKb,OAAO,MAAMC,WAAW,GAAG,YAAY,MAAMrC,OAAO,CAACgB,IAAD,CAA7C;MAAMqB,W;AAEb,OAAO,MAAMC,0BAA0B,GAAIC,QAAD,IAAc;EACpDtC,kBAAkB,CAACe,IAAD,EAAOuB,QAAP,CAAlB;AACH,CAFM"},"metadata":{},"sourceType":"module"}